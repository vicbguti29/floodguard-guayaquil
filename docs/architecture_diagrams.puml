@startuml FloodGuard_Architecture_Complete

!define RECTANGLE class

skinparam backgroundColor #FEFEFE
skinparam componentStyle rectangle
skinparam defaultFontName Arial
skinparam defaultFontSize 12

title FloodGuard - Arquitectura Completa Transformer + GNN\n(Predicci√≥n de Inundaciones Guayaquil)

' ============================================
' INPUTS
' ============================================
package "üìä DATOS DE ENTRADA" as inputs {
    rectangle "Series Temporales\nMeteorol√≥gicas" as weather_data {
        [Precipitaci√≥n (mm/h)]
        [Temperatura (¬∞C)]
        [Humedad (%)]
        [Velocidad viento (km/h)]
    }

    rectangle "Datos Geoespaciales" as geo_data {
        [Topograf√≠a (elevaci√≥n)]
        [Red de alcantarillado]
        [Cuerpos de agua]
        [Zonas de Guayaquil]
    }

    note right of weather_data
        **Frecuencia:** Cada hora
        **Ventana:** √öltimas 24h
        **Fuente:** INAMHI/INOCAR
    end note

    note right of geo_data
        **Resoluci√≥n:** Grid 2km x 2km
        **Zonas:** 840 celdas
        **Fuente:** OpenStreetMap
    end note
}

' ============================================
' TRANSFORMER TEMPORAL
' ============================================
package "üîÑ TRANSFORMER TEMPORAL" as transformer {
    rectangle "Input Embedding" as embed {
        [Positional Encoding\n(Time-aware)]
        [Feature Embedding\n4D ‚Üí 128D]
    }

    rectangle "Multi-Head\nSelf-Attention" as attention {
        [Query (Q)]
        [Key (K)]
        [Value (V)]
        ---
        [Attention(Q,K,V) = softmax(QK^T/‚àöd)V]
    }

    rectangle "Feed-Forward\nNetwork" as ffn {
        [Linear 128‚Üí512]
        [ReLU]
        [Linear 512‚Üí128]
    }

    rectangle "Transformer\nEncoder Stack" as encoder {
        [Layer 1: Attention + FFN]
        [Layer 2: Attention + FFN]
        [...N capas...]
    }

    rectangle "Output Projection" as proj {
        [Predicci√≥n pr√≥ximas 6h]
        [Por cada feature]
    }

    embed --> attention
    attention --> ffn
    ffn --> encoder
    encoder --> proj

    note right of attention
        **Funci√≥n de Atenci√≥n:**
        Captura dependencias temporales
        en las series de lluvia

        **Ventaja vs LSTM:**
        Paralelizable, captura
        relaciones de largo plazo
    end note
}

' ============================================
' GRAPH NEURAL NETWORK
' ============================================
package "üï∏Ô∏è GRAPH NEURAL NETWORK (Espacial)" as gnn {
    rectangle "Construcci√≥n\ndel Grafo" as graph_build {
        [Nodos = Zonas de Guayaquil]
        [Edges = Conexiones hidrol√≥gicas]
        [Features = Topograf√≠a, predicci√≥n lluvia]
    }

    rectangle "Graph Convolution\nLayers (GCN)" as gcn {
        [Agregaci√≥n de vecinos]
        [h_i^(l+1) = œÉ(Œ£ W¬∑h_j^(l) / |N(i)|)]
        [Propagaci√≥n de informaci√≥n]
    }

    rectangle "Graph Attention\nNetwork (GAT)" as gat {
        [Attention weights Œ±_ij]
        [h_i = œÉ(Œ£ Œ±_ij¬∑W¬∑h_j)]
        [Aprendizaje de importancia]
    }

    rectangle "Message Passing" as mp {
        [3-5 capas de propagaci√≥n]
        [Informaci√≥n fluye entre zonas]
        [Simula propagaci√≥n de agua]
    }

    graph_build --> gcn
    gcn --> gat
    gat --> mp

    note right of graph_build
        **Conexiones:**
        - Adyacencia geogr√°fica
        - Flujo de alcantarillado
        - Pendiente topogr√°fica
        - R√≠os y esteros
    end note

    note right of mp
        **Message Passing:**
        Zona A inundada ‚Üí
        propaga riesgo a zonas
        conectadas aguas abajo
    end note
}

' ============================================
' FUSION LAYER
' ============================================
rectangle "‚ö° FUSION LAYER\n(Atenci√≥n Cruzada)" as fusion {
    [Transformer Output (temporal)]
    [GNN Output (espacial)]
    ---
    [Cross-Attention]
    [Combina predicciones]
    [temporales + espaciales]
}

' ============================================
' OUTPUT
' ============================================
package "üìç PREDICCIONES POR ZONA" as outputs {
    rectangle "Clasificaci√≥n\nde Riesgo" as risk {
        [Probabilidad de inundaci√≥n]
        [Nivel: Low/Medium/High/Critical]
        [Tiempo estimado (2-6h)]
        [Confianza del modelo]
    }

    rectangle "Output por Zona" as zone_output {
        [Zona Z001: Los Sauces ‚Üí 45% (Medium)]
        [Zona Z002: Guasmo ‚Üí 78% (High)]
        [Zona Z003: Basti√≥n ‚Üí 15% (Low)]
        [... 840 zonas]
    }

    risk --> zone_output
}

' ============================================
' CONEXIONES PRINCIPALES
' ============================================
weather_data --> embed : "√öltimas 24h\n(96 timesteps)"
geo_data --> graph_build : "Grid espacial\n840 zonas"

proj --> fusion : "Predicci√≥n\ntemporal"
mp --> fusion : "Propagaci√≥n\nespacial"

fusion --> risk : "Predicci√≥n\nintegrada"

' ============================================
' LEYENDA
' ============================================
legend right
    **Componentes Clave:**

    |= Color |= Significado |
    | <#LightBlue> | Input/Output |
    | <#LightGreen> | Procesamiento Temporal |
    | <#LightCoral> | Procesamiento Espacial |
    | <#Gold> | Fusi√≥n |

    **Flujo de Informaci√≥n:**
    1. Series temporales ‚Üí Transformer (atenci√≥n temporal)
    2. Datos geoespaciales ‚Üí GNN (propagaci√≥n espacial)
    3. Fusi√≥n de ambos ‚Üí Predicci√≥n final por zona

    **Innovaci√≥n:**
    Combina lo mejor de ambos mundos:
    - Transformer: Dependencias temporales complejas
    - GNN: Relaciones espaciales y propagaci√≥n
end legend

@enduml

' ============================================
' DIAGRAMA 2: MECANISMO DE ATENCI√ìN DETALLADO
' ============================================

@startuml Transformer_Attention_Mechanism

skinparam backgroundColor #FEFEFE
skinparam defaultFontName Arial

title Mecanismo de Atenci√≥n en Transformer\n(Para predicci√≥n de lluvia temporal)

!define MATRIX rectangle

package "Input: Serie Temporal 24h" as input {
    MATRIX "X = [x‚ÇÅ, x‚ÇÇ, ..., x‚ÇÇ‚ÇÑ]" as X {
        [t‚ÇÅ: 12mm, 25¬∞C, 80%, 10km/h]
        [t‚ÇÇ: 15mm, 24¬∞C, 82%, 12km/h]
        [...]
        [t‚ÇÇ‚ÇÑ: 8mm, 26¬∞C, 75%, 8km/h]
    }
}

package "Linear Projections" as projections {
    MATRIX "Query (Q)" as Q {
        [Q = X ¬∑ W_Q]
        [Dimensi√≥n: 24 x 128]
    }

    MATRIX "Key (K)" as K {
        [K = X ¬∑ W_K]
        [Dimensi√≥n: 24 x 128]
    }

    MATRIX "Value (V)" as V {
        [V = X ¬∑ W_V]
        [Dimensi√≥n: 24 x 128]
    }
}

MATRIX "Attention Scores" as scores {
    [Score = Q ¬∑ K^T / ‚àöd_k]
    [Dimensi√≥n: 24 x 24]
    ---
    **Matriz de Atenci√≥n:**
    Qu√© tanto cada timestep
    se relaciona con otros
}

MATRIX "Softmax" as softmax {
    [Weights = softmax(Score)]
    [Suma por fila = 1]
    ---
    **Normalizaci√≥n:**
    Convierte scores a
    probabilidades
}

MATRIX "Weighted Values" as weighted {
    [Output = Weights ¬∑ V]
    [Dimensi√≥n: 24 x 128]
    ---
    **Combinaci√≥n:**
    Suma ponderada de valores
    seg√∫n importancia
}

X --> Q
X --> K
X --> V

Q --> scores
K --> scores
scores --> softmax
softmax --> weighted
V --> weighted

note right of scores
    **Intuici√≥n:**
    Si llueve mucho en t=10,
    el modelo aprende a poner
    atenci√≥n en t=8, t=9
    (horas previas relevantes)
end note

note right of weighted
    **Output:**
    Representaci√≥n enriquecida
    de cada timestep considerando
    contexto temporal completo

    **Ventaja:**
    Captura patrones como:
    "lluvia intensa seguida de
    pico 2h despu√©s"
end note

@enduml

' ============================================
' DIAGRAMA 3: GNN MESSAGE PASSING
' ============================================

@startuml GNN_Message_Passing

skinparam backgroundColor #FEFEFE
skinparam defaultFontName Arial

title Graph Neural Network - Message Passing\n(Propagaci√≥n espacial de inundaci√≥n)

!define NODE circle
!define EDGE -->

package "Grafo de Zonas Guayaquil" as graph {
    NODE "Zona A\nGuasmo" as ZA {
        **Features:**
        Lluvia: 60mm
        Elevaci√≥n: 2m
        Prob: 0.8
    }

    NODE "Zona B\nBasti√≥n" as ZB {
        **Features:**
        Lluvia: 45mm
        Elevaci√≥n: 5m
        Prob: 0.4
    }

    NODE "Zona C\nSauces" as ZC {
        **Features:**
        Lluvia: 30mm
        Elevaci√≥n: 10m
        Prob: 0.2
    }

    NODE "Zona D\nKennedy" as ZD {
        **Features:**
        Lluvia: 35mm
        Elevaci√≥n: 8m
        Prob: 0.3
    }
}

ZA EDGE ZB : "Conectadas\npor estero"
ZA EDGE ZC : "Flujo\naguas abajo"
ZB EDGE ZD : "Adyacentes"
ZC EDGE ZD : "Red de\nalcantarillado"

package "Message Passing (Iteraci√≥n 1)" as mp1 {
    rectangle "Agregaci√≥n" as agg1 {
        **Zona B recibe mensajes:**
        - Zona A: h_A * w_AB
        - (h_A = features de A)
        - (w_AB = peso de conexi√≥n)

        **Actualizaci√≥n:**
        h_B' = œÉ(W ¬∑ [h_B || Œ£(mensajes)])
    }
}

package "Resultado Final (3-5 iteraciones)" as result {
    rectangle "Probabilidades Actualizadas" as probs {
        [Zona A: 0.8 ‚Üí 0.85] (alta, se mantiene)
        [Zona B: 0.4 ‚Üí 0.65] (‚Üë por vecindad con A)
        [Zona C: 0.2 ‚Üí 0.35] (‚Üë flujo desde A)
        [Zona D: 0.3 ‚Üí 0.45] (‚Üë vecindad con B)
    }

    note right of probs
        **Efecto de Propagaci√≥n:**

        Zona A inundada (alta lluvia + baja elevaci√≥n)
        ‚Üí propaga riesgo a zonas conectadas
        ‚Üí aunque tengan menos lluvia

        **Realista:**
        Modela c√≥mo el agua fluye
        de zonas altas a bajas,
        y por red de alcantarillado
    end note
}

graph --> mp1
mp1 --> result

legend right
    **Tipos de Conexiones:**

    |= Tipo |= Peso |
    | Flujo gravitacional | Alto (pendiente) |
    | Alcantarillado | Medio |
    | Adyacencia simple | Bajo |

    **Iteraciones:**
    M√°s iteraciones = mayor
    alcance de propagaci√≥n

    3-5 capas t√≠picamente
    suficientes para Guayaquil
end legend

@enduml

@startuml FloodGuard_Simple_Flow

skinparam backgroundColor #FEFEFE
title FloodGuard - Flujo Simplificado (Para TikTok)

rectangle "üåßÔ∏è INPUT\nPrecipitaci√≥n\n24h pasadas" as input
rectangle "üß† TRANSFORMER\nAn√°lisis temporal\n¬øCu√°ndo llover√°?" as transformer
rectangle "üï∏Ô∏è GNN\nPropagaci√≥n espacial\n¬øD√≥nde se inundar√°?" as gnn
rectangle "‚ö° FUSI√ìN\nCombina predicciones" as fusion
rectangle "üìç OUTPUT\nZonas en riesgo\n2-6h antes" as output

input --> transformer : "Atenci√≥n\ntemporal"
transformer --> fusion : "Predicci√≥n\nfutura"
input --> gnn : "Grafo\nespacial"
gnn --> fusion : "Propagaci√≥n\nagua"
fusion --> output : "Alertas\npor zona"

note bottom of output
    **Ejemplo de Output:**

    üü¢ Los Sauces: Riesgo Bajo (12%)
    üü° Alborada: Riesgo Medio (45%)
    üî¥ Guasmo: Riesgo Alto (78%) - ‚è∞ 3.5h
    üî¥ Basti√≥n: Riesgo Cr√≠tico (92%) - ‚è∞ 2h
end note

@enduml
